name: Create Mirror PR and Repo Sync
on:
  workflow_call:
    inputs:
      pr_number:
        description: 'Source repo PR Number'
        required: true
        type: number
      sync_branch:
        description: 'branch to sync'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Source repo PR Number'
        required: true
        type: number
      sync_branch:
        description: 'branch to sync'
        required: true
        type: string

env:
  GH_TOKEN: ${{ secrets.PAT }}
  GITHUB_TOKEN: ${{ secrets.PAT }}
  PR_NUMBER: ${{ github.event.inputs.pr_number }}
  SYNC_BRANCH: ${{ github.event.inputs.sync_branch }}

concurrency:
  group: mirror-pr-repo-sync-${{ github.event.inputs.sync_branch }}
  cancel-in-progress: false
jobs:
  mirror-pr-repo-sync:
    if: ${{ github.repository_owner != 'vyos' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write

    steps:
    - name: Bullfrog Secure Runner
      uses: bullfrogsec/bullfrog@v0
      with:
        egress-policy: audit

    - name: Set source and target repo
      run: |
        target_repo="${{ github.repository }}"
        echo "target_repo=${target_repo}" >> $GITHUB_ENV
        source_repo=$(echo $target_repo | sed 's/^[^\/]*\//vyos\//')
        echo "source_repo=${source_repo}" >> $GITHUB_ENV

    - name: Checkout source repo
      run: |
        mkdir -p /tmp/public
        cd /tmp/public
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git init
        git remote add origin https://x-access-token:${{ secrets.PAT }}@github.com/${source_repo}.git
        git fetch
        git checkout -b $SYNC_BRANCH

    - name: Get PR info
      run: |
        cd /tmp/public
        pr_info=$(gh pr view $PR_NUMBER --json commits,mergeCommit,body,title)
        last_commit=$(echo $pr_info | jq -r '.commits[-1].oid')
        merge_commit=$(echo $pr_info | jq -r '.mergeCommit.oid')
        merge_commit_message=$(git log -1 --pretty=%B $merge_commit)
        pr_body=$(echo $pr_info | jq -r '.body')
        echo "pr_body<<EOF" >> $GITHUB_ENV
        echo "$pr_body" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        pr_title=$(echo $pr_info | jq -r '.title')
        echo "merge_commit=${merge_commit}" >> $GITHUB_ENV
        echo "pr_title=${pr_title}" >> $GITHUB_ENV
        if [[ "$merge_commit_message" == "Merge pull request #${PR_NUMBER} from"* ]]; then
          echo "last_commit=${last_commit}" >> $GITHUB_ENV
        else
          echo "last_commit=${merge_commit}" >> $GITHUB_ENV
        fi
        echo "pr_merge_branch=mirror/${SYNC_BRANCH}/$PR_NUMBER" >> $GITHUB_ENV

    - name: Create temp feature branch
      run: |
        cd /tmp/public
        git checkout -b $pr_merge_branch $last_commit

    - name: Push merge branch to target repo
      run: |
        cd /tmp/public
        git remote add target https://x-access-token:${{ secrets.PAT }}@github.com/${target_repo}.git
        git push target $pr_merge_branch

    - name: Create remote PR
      run: |
        run_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        title="${pr_title} (mirror ${PR_NUMBER})"
        echo "**Note**: This pull request is mirrored from PR [$PR_NUMBER](https://github.com/${source_repo}/pull/${PR_NUMBER}) using [workflow run](${run_url})." > pr_body.txt
        echo "" >> pr_body.txt
        echo "${pr_body}" >> pr_body.txt
        gh pr create --repo ${target_repo} --head $pr_merge_branch --base $SYNC_BRANCH --title "${title}" --body "$(cat pr_body.txt)"

    - uses: actions/checkout@v4
      with:
        persist-credentials: false

    - name: Repo sync
      shell: bash
      run: |
        set -e
        source_repo="https://github.com/${source_repo}.git"
        echo "source_repo=$source_repo"
        echo "merge_commit=$merge_commit"

        git config --unset-all http."https://github.com/".extraheader || :

        echo "Resetting origin to: https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$target_repo"
        git remote set-url origin "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$target_repo"

        echo "Adding tmp_source $source_repo"
        git remote add tmp_source "$source_repo"

        echo "Fetching tmp_source"
        git fetch tmp_source --quiet
        git remote --verbose

        echo "Pushing changes from tmp_source to origin"
        git push origin "${merge_commit}:refs/heads/${SYNC_BRANCH}" --force

        echo "Removing tmp_source"
        git remote rm tmp_source
        git remote --verbose
